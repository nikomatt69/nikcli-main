#!/usr/bin/env node

// Simple test to verify the Git initialization logic
const { execSync } = require('node:child_process');
const fs = require('node:fs/promises');
const path = require('node:path');

async function testGitInitialization() {
  console.log('üß™ Testing Git repository initialization fixes...');

  const testDir = path.join(process.cwd(), 'test-repo-workspace');

  try {
    // Clean up any existing test directory
    try {
      await fs.rm(testDir, { recursive: true, force: true });
    } catch {}

    // Create test workspace
    await fs.mkdir(testDir, { recursive: true });

    console.log('‚úì Test workspace created');

    // Simulate the bug fix logic for git initialization
    const repoDir = path.join(testDir, 'repo');
    await fs.mkdir(repoDir, { recursive: true });

    // Test git initialization (as per our fix)
    try {
      execSync('git rev-parse --is-inside-work-tree', { cwd: repoDir, stdio: 'ignore' });
      console.log('‚úì Already a git repository');
    } catch {
      console.log('‚ö†Ô∏è Not a git repository, initializing...');
      execSync('git init', { cwd: repoDir });
      execSync('git config user.email "nikcli-agent@localhost"', { cwd: repoDir });
      execSync('git config user.name "NikCLI Agent"', { cwd: repoDir });
      console.log('‚úì Git repository initialized successfully');
    }

    // Test file creation and staging
    const testFile = path.join(repoDir, 'test-file.txt');
    await fs.writeFile(testFile, 'Test content from NikCLI bug fix');

    // Test the improved change detection logic
    const diffOutput = execSync('git add -A && git diff --staged --name-only', {
      cwd: repoDir,
      encoding: 'utf8',
    });

    if (diffOutput.trim()) {
      console.log('‚úì Changes detected correctly:', diffOutput.trim());

      // Test commit with proper message
      const commitMessage = `feat: Test fix

ü§ñ Generated by NikCLI Background Agent
‚è∞ ${new Date().toISOString()}`;

      execSync(`git commit -m "${commitMessage}"`, { cwd: repoDir });
      console.log('‚úì Commit created successfully');

      // Test branch creation
      const branchName = `test-branch-${Date.now()}`;
      execSync(`git checkout -b ${branchName}`, { cwd: repoDir });
      console.log(`‚úì Branch ${branchName} created successfully`);

    } else {
      console.log('‚ùå No changes detected - this should not happen');
    }

    console.log('‚úÖ All Git initialization fixes working correctly!');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  } finally {
    // Clean up
    try {
      await fs.rm(testDir, { recursive: true, force: true });
      console.log('üßπ Test workspace cleaned up');
    } catch {}
  }
}

testGitInitialization().catch(console.error);