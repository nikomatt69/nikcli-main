%% AI System Architecture - nikcli
%% File: docs/ai-system.mmd
%% Generated by assistant

flowchart LR
  %% Legend
  classDef cloud fill:#f3f4f6,stroke:#111827,stroke-width:1px;
  classDef service fill:#eef2ff,stroke:#4338ca,stroke-width:1px;
  classDef storage fill:#ecfccb,stroke:#365314,stroke-width:1px;
  classDef cli fill:#fff7ed,stroke:#92400e,stroke-width:1px;
  classDef db fill:#fef3c7,stroke:#92400e,stroke-width:1px;
  classDef infra fill:#ede9fe,stroke:#6d28d9,stroke-width:1px;

  %% User
  subgraph USER[Utente]
    U[Terminale / Utente]
  end

  %% CLI & UX
  subgraph CLI[CLI - nikcli]
    direction TB
    CMD[Command Parser]
    UI[Terminal UI (ink / blessed)]
    ORCH[Core Orchestrator]
    PLUG[Plugin / Extensions]
  end
  class CLI cli;

  %% Providers & AI services
  subgraph PROVIDERS[Provider AI e SDK]
    direction TB
    ADAPT[Provider Adapter (@ai-sdk/*)]
    MODEL_LOCAL[Local models (Ollama, local runners)]
    MODEL_REMOTE[Remote APIs (OpenAI, Anthropic, etc.)]
    EMB_PROVIDER[Embeddings Providers]
  end
  class PROVIDERS service;

  %% Storage, Vector DB and cache
  subgraph STORAGE[Storage & DB]
    direction TB
    VDB[Vector DB (ChromaDB / Supabase Vector DB)]
    METADB[Metadata store (Supabase / Postgres)]
    CACHE[Cache (local / Redis via ioredis)]
    FS[File System / Workspace]
  end
  class STORAGE storage;

  %% Retrieval / RAG / Pipelines
  subgraph RAG[RAG / Retrieval Pipelines]
    RETR[Retriever (ANN / KNN)]
    RANK[Ranking / Reâ€‘scoring]
    PROMPT[Prompt Composer / Templates]
  end
  class RAG service;

  %% Infra & Packaging
  subgraph INFRA[Infra / Dev / Packaging]
    PKG[Packager (pkg / ncc)]
    CI[CI / GitHub Actions]
    TEST[Tests (vitest)]
    CONFIG[Config (.env / conf)]
  end
  class INFRA infra;

  %% Edges: user -> CLI
  U --> CMD
  CMD --> UI
  UI --> ORCH
  CMD --> ORCH
  ORCH --> PLUG

  %% Orchestrator to providers and storage
  ORCH --> ADAPT
  ADAPT --> MODEL_LOCAL
  ADAPT --> MODEL_REMOTE
  ADAPT --> EMB_PROVIDER

  %% Embeddings and vector DB flow
  EMB_PROVIDER --> VDB
  MODEL_REMOTE --> PROMPT
  MODEL_LOCAL --> PROMPT

  %% RAG flow
  ORCH --> RETR
  RETR --> VDB
  RETR --> METADB
  RETR --> FS
  RETR --> RANK
  RANK --> PROMPT
  PROMPT --> ADAPT

  %% Cache and metadata
  ORCH --> CACHE
  CACHE --> MODEL_REMOTE
  CACHE --> MODEL_LOCAL

  %% Storage links
  FS --> VDB
  FS --> METADB

  %% Infra links
  ORCH --> CONFIG
  PKG --> CLI
  CI --> TEST
  CI --> PKG
  CI --> CONFIG

  %% Notes
  class U,PKG,CI,TEST,CONFIG cloud;

  %% Styling important nodes
  class VDB db;

  %% Example flows annotations
  subgraph FLOW1[Use-case: Knowledge Retrieval + Answer]
    direction TB
    U1((User)) -->|run command| CMD1[nikcli ask --query "..."]
    CMD1 --> ORCH1[Orchestrator]
    ORCH1 --> RETR1[Retriever: embed query -> ANN search]
    RETR1 --> VDB1[Vector DB (ChromaDB)]
    VDB1 --> RETR1
    RETR1 --> PROMPT1[Compose prompt with contexts]
    PROMPT1 --> ADAPT1[Adapter -> chosen model]
    ADAPT1 --> MODEL1[Model (remote/local) -> generate]
    MODEL1 --> ORCH1
    ORCH1 --> U1
  end

  %% Footer / Legend
  classDef legend fill:#ffffff,stroke:#000,stroke-width:0.5px;
  subgraph LEGEND[Legenda]
    direction LR
    L1[CLI: Interfaccia a riga di comando]
    L2[Provider Adapter: astrae provider diversi]
    L3[Vector DB: archivia embeddings e supporta ANN]
    L4[Cache: migliora latenza e riduce costi API]
  end
  class LEGEND legend;

  %% End
