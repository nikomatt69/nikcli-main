%% AI System Architecture - nikcli
%% File: docs/ai-system.mmd
%% Generated by assistant (fixed syntax)

%%{init: {"startOnLoad": true, "theme": "default", "flowchart": {"useMaxWidth": false}, "width": 1280, "height": 720}}%%

flowchart LR
  %% Class styles
  classDef cloud fill:#f3f4f6,stroke:#111827,stroke-width:1px;
  classDef service fill:#eef2ff,stroke:#4338ca,stroke-width:1px;
  classDef storage fill:#ecfccb,stroke:#365314,stroke-width:1px;
  classDef cli fill:#fff7ed,stroke:#92400e,stroke-width:1px;
  classDef db fill:#fef3c7,stroke:#92400e,stroke-width:1px;
  classDef infra fill:#ede9fe,stroke:#6d28d9,stroke-width:1px;

  %% User
  subgraph USER_SG[Utente]
    direction TB
    user_terminal["Terminale / Utente"]
  end

  %% CLI & UX
  subgraph CLI_SG[CLI - nikcli]
    direction TB
    cmd_parser["Command Parser"]
    ui_node["Terminal UI (ink or blessed)"]
    orchestrator["Core Orchestrator"]
    plugins["Plugin / Extensions"]
  end
  class CLI_SG cli;

  %% Providers & AI services
  subgraph PROVIDERS_SG[Provider AI and SDK]
    direction TB
    adapter["Provider Adapter (ai-sdk)"]
    model_local["Local models (Ollama, local runners)"]
    model_remote["Remote APIs (OpenAI, Anthropic, etc.)"]
    emb_provider["Embeddings Providers"]
  end
  class PROVIDERS_SG service;

  %% Storage, Vector DB and cache
  subgraph STORAGE_SG[Storage and DB]
    direction TB
    vector_db["Vector DB (ChromaDB / Supabase)"]
    metadata_db["Metadata store (Supabase / Postgres)"]
    cache_store["Cache (local / Redis)"]
    filesystem["File System / Workspace"]
  end
  class STORAGE_SG storage;

  %% Retrieval / RAG / Pipelines
  subgraph RAG_SG[RAG and Retrieval Pipelines]
    direction TB
    retriever["Retriever (ANN / KNN)"]
    ranker["Ranking and Re-scoring"]
    prompt_comp["Prompt Composer and Templates"]
  end
  class RAG_SG service;

  %% Infra & Packaging
  subgraph INFRA_SG[Infrastructure, CI and Packaging]
    direction TB
    packager["Packager (pkg / ncc)"]
    ci_pipeline["CI (GitHub Actions)"]
    tests["Tests (vitest)"]
    config_store["Config (.env / conf)"]
  end
  class INFRA_SG infra;

  %% Edges: user -> CLI
  user_terminal --> cmd_parser
  cmd_parser --> ui_node
  ui_node --> orchestrator
  cmd_parser --> orchestrator
  orchestrator --> plugins

  %% Orchestrator to providers and storage
  orchestrator --> adapter
  adapter --> model_local
  adapter --> model_remote
  adapter --> emb_provider

  %% Embeddings and vector DB flow
  emb_provider --> vector_db
  model_remote --> prompt_comp
  model_local --> prompt_comp

  %% RAG flow
  orchestrator --> retriever
  retriever --> vector_db
  retriever --> metadata_db
  retriever --> filesystem
  retriever --> ranker
  ranker --> prompt_comp
  prompt_comp --> adapter

  %% Cache and metadata
  orchestrator --> cache_store
  cache_store --> model_remote
  cache_store --> model_local

  %% Storage links
  filesystem --> vector_db
  filesystem --> metadata_db

  %% Infra links
  orchestrator --> config_store
  packager --> CLI_SG
  ci_pipeline --> tests
  ci_pipeline --> packager
  ci_pipeline --> config_store

  %% Styling important nodes
  class vector_db db;
  class user_terminal,packager,ci_pipeline,tests,config_store cloud;

  %% Example flow: Knowledge Retrieval
  subgraph FLOW1[Use-case: Knowledge Retrieval and Answer]
    direction TB
    flow_user((User)) -->|run command| flow_cmd["nikcli ask --query '...' "]
    flow_cmd --> flow_orch["Orchestrator"]
    flow_orch --> flow_retr["Retriever: embed query -> ANN search"]
    flow_retr --> flow_vdb["Vector DB (ChromaDB)"]
    flow_vdb --> flow_retr
    flow_retr --> flow_prompt["Compose prompt with contexts"]
    flow_prompt --> flow_adapter["Adapter -> chosen model"]
    flow_adapter --> flow_model["Model (remote/local) -> generate"]
    flow_model --> flow_orch
    flow_orch --> flow_user
  end

  %% Footer / Legend
  classDef legend fill:#ffffff,stroke:#000,stroke-width:0.5px;
  subgraph LEGEND_SG[Legenda]
    direction LR
    L1["CLI: Command line interface"]
    L2["Provider Adapter: abstracts multiple providers"]
    L3["Vector DB: stores embeddings and supports ANN"]
    L4["Cache: improves latency and reduces API costs"]
  end
  class LEGEND_SG legend;

  %% End
