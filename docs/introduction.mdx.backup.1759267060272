---\ntitle: Introduction\ndescription: \"NikCLI - Context-Aware AI Development Assistant\"\n---\n\n## What is NikCLI?\n\nNikCLI is a **production-ready autonomous AI development assistant** that provides an intelligent command-line interface for software development. It combines conversational AI with autonomous code generation, file manipulation, and project management capabilities.\n\n## Key Features\n\n### ðŸ¤– Intelligent AI Agents\n\n- **Universal Agent**: Comprehensive full-stack development capabilities\n- **Specialized Agents**: React, Backend, DevOps, and domain-specific experts (implemented via agent-router.js and agent-manager.js)\n- **Multi-Agent Orchestration**: Parallel execution and coordination\n\n### ðŸ’¬ Natural Language Interface\n\n- **Conversational Chat**: Natural language commands and interactions\n- **Stream Processing**: Real-time feedback and progress tracking\n- **Interactive Approval**: Review and approve automated changes\n\n### ðŸ”¨ Powerful Tool System\n\n- **File Operations**: Read, write, edit, search with security policies\n- **Command Execution**: Bash, npm, git operations with sandboxing\n- **Project Analysis**: Dependency detection and technology identification (via /analyze-project command)\n\n### ðŸ§  Context & Memory\n\n- **Workspace-Aware**: Automatic project understanding\n- **RAG System**: Intelligent code recommendations\n- **Token Management**: Optimized context handling\n\n## Supported AI Providers\n\nNikCLI supports multiple providers via AI SDK:\n\n- **Anthropic Claude** (Primary): Advanced reasoning; set `ANTHROPIC_API_KEY`.\n- **OpenAI GPT**: Diverse models; set `OPENAI_API_KEY`.\n- **Google Gemini**: Multimodal; set `GOOGLE_GENERATIVE_AI_API_KEY`.\n- **Ollama**: Local/offline; no key needed (run `ollama serve`).\n\n## Technology Stack\n\n- **TypeScript 5.3+**: Modern language features and strict typing.\n- **Node.js 18+**: Runtime environment.\n- **AI SDK**: Unified abstraction for providers.\n- **Vitest**: Test runner for unit/integration tests.\n- **Biome**: Linting and formatting (via `pnpm lint`/`format`).\n- **Terminal UI**: Chalk for colors, Boxen for panels, Inquirer for prompts, Ora for spinners.\n- **Backend**: Express for API, ioredis for queues.\n- **Build/Distribution**: TSC, pkg for binaries, Docker support.\n\n## Architecture Overview\n\nCore structure (from codebase):\n- CLI Entry: bin/cli.ts â†’ Orchestrator.\n- Agents: src/cli/automation/agents/* (e.g., agent-manager.js for orchestration).\n- Tools: File ops, git, package mgmt (via scripts in package.json).\n- Background: nikctl/nikd for async jobs (see BACKGROUND_AGENTS.md).\n\n```mermaid\ngraph TB\n    A[CLI Entry Point] --> B[Orchestrator Service]\n    B --> C[Agent Service]\n    B --> D[Tool Service]\n    B --> E[Planning Service]\n    C --> F[Universal Agent]\n    C --> G[Specialized Agents]\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n```\n\n## Quick Start\n\n1. **Install**: `npm install -g @nicomatt69/nikcli` (or yarn/pnpm/bun).\n2. **Set API Key**: `export ANTHROPIC_API_KEY=your-key`.\n3. **Start**: `nikcli`.\n4. **First Command**: `/help` or `/analyze-project`.\n\n## Community and Support\n\n- **GitHub**: [nikomatt69/nikcli-main](https://github.com/nikomatt69/nikcli-main) (source, issues).\n- **Documentation**: See root README.md and BACKGROUND_AGENTS.md.\n- **Contributing**: Follow package.json scripts for dev (e.g., `pnpm dev`, `pnpm test`).\n\n**Note**: Docs reflect current v0.2.3 codebase. UI components (e.g., Cards) are conceptual; CLI uses terminal rendering.