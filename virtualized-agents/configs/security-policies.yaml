// TODO: Consider refactoring for reduced complexity
# Security Policies Configuration for Virtualized Agents
#
# This YAML document defines comprehensive security policies for virtualized agents
# (e.g., AI-driven or containerized software agents in a virtualized environment).
# It is designed for easy integration into CI/CD pipelines, such as loading via
# tools like Helm, Terraform, or custom scripts in GitHub Actions/Jenkins.
#
# Key Principles:
# - Least privilege access
# - End-to-end encryption
# - Compliance with GDPR (data protection, consent, breach notification) and SOC2 (trust services criteria: security, availability, processing integrity, confidentiality, privacy)
# - Immutable auditing logs
# - Proactive threat modeling (e.g., STRIDE model integration)
#
# Express Integration Notes:
# - This config can be loaded in an Express.js app (e.g., via `yaml` or `js-yaml` parser)
#   to configure middleware like Helmet for security headers, Passport for auth, and Winston for logging.
# - Example usage in Express: const config = yaml.load(fs.readFileSync('security-policies.yaml', 'utf8')); app.use(helmet(config.helmet));
# - Assumes Node.js/Express backend for agent orchestration; virtualized agents interact via APIs secured by these policies.
#
# Production Readiness:
# - Validated against YAML 1.2 schema (no advanced features like merge keys unless noted)
# - Comments for clarity; anchors/references for DRY (Don't Repeat Yourself)
# - Secrets should be externalized (e.g., via env vars or Vault); never hardcode here
# - Versioned for CI/CD: Use semantic versioning in pipelines (e.g., bump on changes)

security_policies:
  version: "1.0.0" # Semantic version for policy updates; enforce in CI/CD via linting
  scope: "virtualized_agents" # Targets containerized/AI agents in Kubernetes/Docker environments
  enforcement_mode: "strict" # Options: 'strict' (fail-fast), 'warn', 'permissive'; default to strict in prod

  # Access Control Policies
  # Implements RBAC (Role-Based Access Control) and ABAC (Attribute-Based Access Control)
  # Integrates with Express via middleware (e.g., express-jwt for JWT validation)
  access_control:
    enabled: true
    model: "rbac_abac_hybrid" # Hybrid for fine-grained control
    roles: # Predefined roles for agents/users
      - name: "admin"
        permissions: ["full_access", "agent_manage", "audit_view"]
        mfa_required: true # Multi-Factor Authentication enforced
      - name: "agent_operator"
        permissions: ["agent_execute", "data_read"]
        mfa_required: false
      - name: "auditor"
        permissions: ["audit_view", "report_generate"]
        mfa_required: true
    policies: # Policy rules (e.g., for OPA or Casbin integration in Express)
      - id: "agent_access_policy"
        description: "Restrict agent execution to authorized roles"
        conditions:
          - role: "agent_operator"
            action: "execute"
            resource: "virtual_agent"
            effect: "allow"
          - role: "admin"
            action: ["execute", "delete"]
            resource: "virtual_agent"
            effect: "allow"
        # Complex logic: Evaluate attributes like IP geolocation for ABAC
        # In Express: Use middleware to check req.user.role against these policies
      - id: "data_access_policy"
        description: "GDPR-aligned data access with consent tracking"
        conditions:
          - action: "read"
            resource: "sensitive_data"
            requires_consent: true # Flag for GDPR Article 6 compliance
            effect: "allow_if_consent"
    express_middleware: # Express-specific config for auth
      jwt_secret_env: "JWT_SECRET" # Load from env; never hardcode
      session_timeout: 3600 # 1 hour in seconds
      cors_origins: # For agent API calls
        - "https://trusted-domain.com"
        - "http://localhost:3000" # Dev only; restrict in prod

  # Data Encryption Policies
  # Covers at-rest (e.g., AES-256) and in-transit (TLS 1.3) encryption
  # Express integration: Use `https` module and `crypto` for encryption
  data_encryption:
    enabled: true
    standards:
      at_rest: "AES-256-GCM" # NIST-approved; use for agent state persistence (e.g., in MongoDB/Redis)
      in_transit: "TLS-1.3" # Enforce via Express HTTPS server
    key_management:
      provider: "aws_kms" # Or "hashicorp_vault"; rotate keys annually
      rotation_period: "P1Y" # ISO 8601 duration: 1 year
      backup_required: true # Automated backups in CI/CD
    policies:
      - id: "agent_data_policy"
        description: "Encrypt all agent inputs/outputs"
        resources: ["agent_logs", "virtual_state"]
        min_key_length: 256
        # Complex logic: Derive keys per-agent using HKDF (HMAC-based Key Derivation Function)
        # In Express: app.use((req, res, next) => { encryptPayload(req.body, config.encryption_key); next(); });
      - id: "pii_encryption_policy"
        description: "Encrypt PII for GDPR compliance"
        resources: ["user_data", "agent_interactions"]
        pseudonymization: true # Tokenize sensitive fields (e.g., emails)
    express_config:
      tls_cert_path: "/path/to/cert.pem" # Managed via CI/CD secrets
      tls_key_path: "/path/to/key.pem"
      force_https: true # Redirect HTTP to HTTPS

  # Compliance Policies
  # Ensures adherence to GDPR (EU 2016/679) and SOC2 (AICPA Trust Services Criteria)
  # Audit trails for compliance reporting; integrate with Express logging
  compliance:
    enabled: true
    standards:
      gdpr:
        principles: # Core GDPR articles mapped to policies
          - article: 5 # Lawfulness, fairness, transparency
            enforcement: "data_minimization" # Limit agent data collection
          - article: 32 # Security of processing
            enforcement: "pseudonymization_anonymization"
          - article: 33 # Breach notification
            notification_threshold: "72h" # Within 72 hours to authorities
        consent_management: # For agent-user interactions
          required: true
          storage: "encrypted_db" # Track consents in compliant DB
      soc2:
        criteria:
          - name: "security"
            controls: ["access_control", "encryption", "auditing"]
          - name: "privacy"
            controls: ["gdpr_integration", "data_retention"]
        reporting_frequency: "quarterly" # Automated reports via CI/CD
    policies:
      - id: "gdpr_compliance_policy"
        description: "Enforce data subject rights (access, erasure)"
        actions: ["right_to_access", "right_to_forget"]
        retention_period: "P2Y" # 2 years max for non-essential data
        # Complex logic: Automate erasure requests; log for SOC2 evidence
      - id: "soc2_audit_policy"
        description: "Maintain trust services controls"
        evidence_collection: true # Auto-generate logs/reports
    express_integration: # Hooks for compliance in API routes
      rate_limiting: # Prevent DoS (SOC2 availability)
        window_ms: 60000 # 1 minute
        max_requests: 100
      data_retention_middleware: true # Purge old data on app startup

  # Auditing Policies
  # Immutable logs for all agent actions; use ELK stack or Splunk integration
  # Express: Integrate with morgan or winston for request logging
  auditing:
    enabled: true
    log_level: "info" # Options: debug, info, warn, error
    retention_period: "P7Y" # 7 years for compliance (GDPR/SOC2)
    immutability: "blockchain_hash" # Append-only with cryptographic hashing (e.g., SHA-256 chains)
    destinations: # Multi-sink logging
      - type: "file"
        path: "/logs/agents.log"
        rotation: "daily"
      - type: "cloud"
        provider: "aws_cloudwatch" # Or "datadog"
    policies:
      - id: "agent_action_audit"
        description: "Log all virtual agent executions"
        events: ["start", "execute", "stop", "error"]
        fields_required: # Mandatory log fields
          - timestamp
          - agent_id
          - user_id
          - action
          - outcome # success/failure
        # Complex logic: Correlate logs across agents; alert on anomalies (e.g., >10 failures/min)
        error_threshold: 5 # Error handling: Alert if errors exceed this in 1min window
      - id: "access_audit_policy"
        description: "Audit all access attempts"
        events: ["login", "api_call", "data_access"]
        fields_required: ["timestamp", "user_id", "action", "ip_address"]
        alerting_threshold: 5 # Failed attempts before alert
        error_threshold: 3 # Enhanced: Threshold for consecutive errors
    express_middleware:
      logger: "morgan" # Or custom: app.use(morgan('combined', { stream: auditStream }));
      skip_paths: ["/health"] # Exempt health checks

  # Threat Mitigation Strategies
  # Based on threat modeling (e.g., STRIDE: Spoofing, Tampering, etc.)
  # Proactive defenses; integrate with Express security middleware
  # Scalability note: Policies scale with agent count via distributed tracing (e.g., Jaeger)
  threat_mitigation:
    enabled: true
    model: "stride" # Systematic threat identification
    strategies:
      - threat: "spoofing" # Identity spoofing
        mitigations:
          - "mfa_enforcement"
          - "certificate_pinning" # For agent TLS
      - threat: "tampering" # Data/code alteration
        mitigations:
          - "integrity_checks" # HMAC on payloads
          - "container_scanning" # In CI/CD: Trivy or Clair for virtual agents
      - threat: "information_disclosure" # Leaks
        mitigations:
          - "encryption_policies"
          - "error_masking" # Don't expose stack traces in Express
      - threat: "denial_of_service" # Resource exhaustion
        mitigations:
          - "rate_limiting"
          - "resource_quotas" # Kubernetes limits for agents
      - threat: "elevation_of_privilege" # Unauthorized escalation
        mitigations:
          - "least_privilege"
          - "sandboxing" # Run agents in isolated namespaces
    scanning:
      frequency: "daily" # Automated vulnerability scans in CI/CD
      tools: ["npm_audit", "docker_scan"] # For Express deps and agent images
    incident_response:
      escalation_contacts: ["security@company.com"]
      auto_quarantine: true # Isolate compromised agents
    express_security:
      helmet_config: # Use helmet middleware
        contentSecurityPolicy: # CSP for frontend if applicable
          directives:
            defaultSrc: ["'self'"]
            scriptSrc: ["'self'", "'unsafe-inline'"] # Adjust for needs
        hsts: # HTTP Strict Transport Security
          maxAge: 31536000 # 1 year
          includeSubDomains: true
        xssProtection: true
      input_validation: # Against injection (SQL/NoSQL/XSS)
        library: "express-validator" # Sanitize req.body/query
        strict_mode: true

# Global Overrides (anchors for reuse if extending)
defaults: &defaults
  enabled: true
  log_events: true
# End of Document
# Validation: Run `yamllint security-policies.yaml` in CI/CD; schema available at [hypothetical schema URL]
# TypeScript Types: See accompanying .ts file for type safety when loading in Express apps
