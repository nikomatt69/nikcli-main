import fs from 'node:fs/promises'
import path from 'node:path'
import chalk from 'chalk'
import { z } from 'zod'
import { BaseTool, type ToolExecutionResult } from './base-tool'

export const GCodeGenerationOptionsSchema = z.object({
  description: z.string().min(1, 'Description must not be empty'),
})

export type GCodeGenerationParams = z.infer<typeof GCodeGenerationOptionsSchema>

export interface GCodeGenerationData {
  gcode: string
  filePath: string
}

export class TextToGCodeTool extends BaseTool {
  constructor(workingDirectory: string) {
    super('text-to-gcode-tool', workingDirectory)
  }

  async execute(params: GCodeGenerationParams): Promise<ToolExecutionResult> {
    const start = Date.now()
    try {
      const validated = GCodeGenerationOptionsSchema.parse(params)
      console.log(chalk.blue(`⚙️ Generating G-code for: "${validated.description}"`))

      const gcode = this.generateBasicGcode(validated.description)
      const filePath = await this.saveGcodeToFile(gcode, validated.description)
      const data: GCodeGenerationData = { gcode, filePath }

      return {
        success: true,
        data,
        metadata: {
          executionTime: Date.now() - start,
          toolName: this.getName(),
          parameters: validated,
        },
      }
    } catch (error: any) {
      return {
        success: false,
        data: {},
        error: error.message,
        metadata: {
          executionTime: Date.now() - start,
          toolName: this.getName(),
          parameters: params,
        },
      }
    }
  }

  private generateBasicGcode(description: string): string {
    // Minimal placeholder; real implementation exists elsewhere
    const lines: string[] = []
    lines.push('; G-code generated by NikCLI')
    lines.push(`; Description: ${description}`)
    lines.push('G21 ; set units to millimeters')
    lines.push('G90 ; absolute positioning')
    lines.push('G0 X0 Y0 Z5')
    lines.push('G1 X10 Y0 F1000')
    lines.push('G1 X10 Y10')
    lines.push('G1 X0 Y10')
    lines.push('G1 X0 Y0')
    lines.push('M2 ; program end')
    return lines.join('\n')
  }

  private async saveGcodeToFile(gcode: string, hint: string): Promise<string> {
    const nikCliDir = path.join(this.workingDirectory, '.nikcli')
    const gcodeDir = path.join(nikCliDir, 'gcode')
    await fs.mkdir(gcodeDir, { recursive: true })
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const slug = (hint || 'job')
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '_')
      .replace(/^_+|_+$/g, '')
      .substring(0, 24)
    const filename = `tool_${slug || 'gcode'}_${timestamp}.gcode`
    const fullPath = path.join(gcodeDir, filename)
    await fs.writeFile(fullPath, gcode, 'utf8')
    console.log(chalk.green(`✅ G-code saved to: ${fullPath}`))
    return path.join('.nikcli', 'gcode', filename)
  }
}

export default TextToGCodeTool
