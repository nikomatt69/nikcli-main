# Bash Tool Documentation

## Purpose
Secure shell command execution with analysis, confirmation, streaming output, and pipefail handling.

## Capabilities
- Allowlist/denylist with risky pattern detection
- Optional confirmation prompt with risk summary
- Streaming stdout, bounded output buffering
- `set -euo pipefail` support for robust pipelines
- Working directory and environment control

## Usage
```ts
const res = await bashTool.execute({
  command: 'npm run build',
  streamOutput: true,
  usePipefail: true,
})
```

## Best Practices
- Prefer SecureToolsRegistry: `secureTools.executeCommand('...')`
- Keep commands short and explicit; avoid wildcards
- Use `skipConfirmation` only for safe, read-only commands


## Enterprise Guidance (Exec Operations)
- Purpose & boundaries: execute shell commands under enterprise guard with cognitive preflight and approval.
- Inputs & assumptions: `command` string; optional `interactive`, `stream`, `loginShell`, `safeMode`; session approvals can suppress prompts at or below allowed risk.
- Safety checklist:
  - Cognitive preflight classifies risk (low/medium/high/critical) and lists reasons.
  - Deny patterns: rm -rf, sudo, chmod 777, dd, mkfs, path traversal.
  - Working directory must be inside the workspace; output length is bounded; timeouts enforced.
- Risk rubric:
  - low: list, read, basic diagnostics
  - medium: package installs, network fetches, docker run
  - high/critical: destructive/system-level changes → explicit approval required
- Approval messaging:
  - Show command, risk, and reasons; ask Approve? Optionally “Approve for session (tool+opType)”.
