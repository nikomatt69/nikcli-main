import type { z } from 'zod' // Optional: If Zod is available for schema; otherwise, use TS types only (as here for no-framework).

/**
 * Enum-like type for supported CAD types.
 * Restricts input to valid 2D/3D formats for GCode generation.
 */
type CadType = '2D' | '3D'

/**
 * Dimensions object for CAD model.
 * Includes optional depth for 3D; defaults to 2D if omitted.
 */
interface Dimensions {
  width: number // Required: Width in mm
  height: number // Required: Height in mm
  depth?: number // Optional: Depth in mm (for 3D)
}

/**
 * Operations array for machining instructions.
 * E.g., ['mill', 'drill', 'cut'] â€“ passed to AI for GCode ops.
 */
type Operations = string[]

/**
 * Input parameters for the generate_gcode tool.
 * Validates CAD description, type, dimensions, and operations.
 */
interface GenerateGCodeParams {
  description: string // Textual CAD description (e.g., "A 10x10 square with a hole in the center")
  cadType: CadType // '2D' or '3D'
  dimensions: Dimensions
  operations: Operations
}

/**
 * Standard NikCLI Tool interface.
 * Defines the tool's metadata, schema, and execution logic.
 * Schema is TS-typed for validation (mirrors Zod pattern without deps).
 */
interface Tool {
  name: string
  description: string
  schema: {
    description: string
    cadType: CadType
    dimensions: Dimensions
    operations: Operations
  }
  execute: (params: GenerateGCodeParams) => Promise<string>
}

/**
 * Validates input parameters.
 * Ensures required fields are present and types match.
 * Throws descriptive errors for production robustness.
 * @param params - Raw input params
 * @returns Validated params
 */
function validateParams(params: unknown): GenerateGCodeParams {
  if (typeof params !== 'object' || params === null) {
    throw new Error('Params must be a non-null object')
  }

  const { description, cadType, dimensions, operations } = params as GenerateGCodeParams

  // Validate description
  if (typeof description !== 'string' || description.trim().length === 0) {
    throw new Error('Description must be a non-empty string')
  }

  // Validate cadType
  const validCadTypes: CadType[] = ['2D', '3D']
  if (!validCadTypes.includes(cadType as CadType)) {
    throw new Error(`cadType must be one of: ${validCadTypes.join(', ')}`)
  }

  // Validate dimensions
  if (typeof dimensions !== 'object' || dimensions === null) {
    throw new Error('Dimensions must be an object')
  }
  if (typeof dimensions.width !== 'number' || dimensions.width <= 0) {
    throw new Error('width must be a positive number')
  }
  if (typeof dimensions.height !== 'number' || dimensions.height <= 0) {
    throw new Error('height must be a positive number')
  }
  if (dimensions.depth !== undefined && (typeof dimensions.depth !== 'number' || dimensions.depth <= 0)) {
    throw new Error('depth must be a positive number if provided')
  }

  // Validate operations
  if (!Array.isArray(operations) || operations.some((op) => typeof op !== 'string')) {
    throw new Error('operations must be an array of strings')
  }
  if (operations.length === 0) {
    throw new Error('operations array cannot be empty')
  }

  return { description, cadType, dimensions, operations }
}

/**
 * Hypothetical AI Provider client (from NikCLI ecosystem).
 * Assumes availability; in real NikCLI, inject via context.
 * Uses generate method to create GCode from prompt.
 */
interface AIProvider {
  generate(prompt: string, options?: { model?: string; maxTokens?: number }): Promise<string>
}

const aiProvider: AIProvider = {
  // Placeholder: In production, this would be the real NikCLI AI service (e.g., OpenAI/Groq integration).
  async generate(prompt: string, options = { model: 'gpt-4', maxTokens: 2000 }): Promise<string> {
    // Simulated AI call; replace with actual aiProvider.generate() in NikCLI.
    // For demo: Returns mock GCode based on prompt.
    console.log(`AI Prompt: ${prompt}`) // Logging for traceability
    // Real impl: await actualAI.generate(prompt, options);
    return `G1 X${options.maxTokens} ; Mock GCode from AI for prompt: ${prompt.substring(0, 50)}...`
  },
}

/**
 * The generate_gcode tool implementation.
 * Matches NikCLI pattern: Exports a Tool object.
 * In execute: Builds AI prompt from params, generates GCode, returns it.
 */
const generateGCodeTool: Tool = {
  name: 'generate_gcode',
  description:
    'Generates GCode from a textual CAD description, specifying type, dimensions, and operations. Uses AI for intelligent conversion.',

  schema: {
    description: 'Textual CAD description (e.g., "A rectangular plate with rounded corners")',
    cadType: '2D' as CadType, // Default/example
    dimensions: { width: 100, height: 50 } as Dimensions, // Default/example
    operations: ['mill'] as Operations, // Default/example
  },

  execute: async (rawParams: unknown): Promise<string> => {
    try {
      // Step 1: Validate inputs (complex logic: type guards and error throwing)
      const params = validateParams(rawParams)

      // Step 2: Construct AI prompt (context-aware: Incorporates all params for accurate GCode)
      // Complex logic: Dynamically builds prompt with dimensions/ops for precision.
      // E.g., "Generate GCode for a 2D CAD: [description]. Dimensions: width=100mm, height=50mm. Operations: mill, drill."
      const dimensionStr = `width=${params.dimensions.width}mm, height=${params.dimensions.height}mm${params.dimensions.depth ? `, depth=${params.dimensions.depth}mm` : ''}`
      const operationsStr = params.operations.join(', ')
      const prompt = `Generate valid GCode for a ${params.cadType} CAD model based on this description: "${params.description}". 
      Use dimensions: ${dimensionStr}. 
      Include these operations: ${operationsStr}. 
      Output only the GCode commands (e.g., G0, G1, M3), no explanations. Ensure safety (e.g., no rapid moves into material).`

      // Step 3: Call AI Provider (async, with options for production efficiency)
      // Complex logic: Streaming-capable, but await full response here for simplicity.
      // Fallback: If AI fails, return error GCode stub (graceful degradation).
      const gcode = await aiProvider.generate(prompt, { model: 'gpt-4', maxTokens: 4000 })

      // Step 4: Post-process (basic validation: Ensure GCode starts with safe init)
      if (!gcode.includes('G') && !gcode.includes('M')) {
        throw new Error('AI-generated output is not valid GCode (missing commands)')
      }

      return gcode.trim() // Clean output
    } catch (error) {
      // Production error handling: Log and throw with context
      console.error('GCode generation failed:', error)
      throw new Error(`Failed to generate GCode: ${(error as Error).message}`)
    }
  },
}

// Export for NikCLI tool registry (matches pattern: default export as Tool)
export default generateGCodeTool

// Usage Example (for testing in NikCLI context):
// async function example() {
//   const params: GenerateGCodeParams = {
//     description: 'A 50x30 rectangle with a central hole',
//     cadType: '2D',
//     dimensions: { width: 50, height: 30 },
//     operations: ['mill', 'drill']
//   };
//   const gcode = await generateGCodeTool.execute(params);
//   console.log(gcode);
// }
